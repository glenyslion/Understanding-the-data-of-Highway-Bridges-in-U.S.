# Display all the records in the table
SELECT * FROM usbridges;

# Count the number of records in the table
SELECT COUNT(*) from usbridges;

# Create a new table and add BRIDGE_ID as PK
CREATE TABLE usbridges_new
SELECT *
FROM usbridges
GROUP BY STATE_CODE_001, STRUCTURE_NUMBER_008;

ALTER TABLE usbridges_new
ADD BRIDGE_ID INT NOT NULL
PRIMARY KEY AUTO_INCREMENT;

# Display all the records in the new table
SELECT * FROM usbridges_new;

# Display the columns and their data types
SHOW COLUMNS FROM usbridges_new;

# Create the BRIDGE table
CREATE TABLE BRIDGE (
	BRIDGE_ID INT NOT NULL,
    STRUCTURE_NUMBER VARCHAR(255) NOT NULL,
    YEAR_BUILT INT,
    YEAR_RECONSTRUCTED INT,
    OWNER_ID DOUBLE,
    SUBMITTED_BY INT,
    SERVICE_ON DOUBLE,
    SERVICE_UND DOUBLE,
    PRIMARY KEY(BRIDGE_ID)
);

INSERT INTO BRIDGE
(SELECT BRIDGE_ID, STRUCTURE_NUMBER_008, YEAR_BUILT_027, YEAR_RECONSTRUCTED_106, OWNER_022, SUBMITTED_BY, 
		SERVICE_ON_042A, SERVICE_UND_042B FROM usbridges_new);
        
SELECT * FROM BRIDGE;

# Create the BRIDGE_LOCATION table
CREATE TABLE BRIDGE_LOCATION (
	BRIDGE_ID INT NOT NULL,
	STATE_CODE INT NOT NULL,
    OTHER_STATE_CODE VARCHAR(255),
    OTHER_STATE_PCNT VARCHAR(255),
    OTHER_STATE_STRUC_NO VARCHAR(255),
    LOCATION VARCHAR(255),
    COUNTRY_CODE DOUBLE,
    PLACE_CODE DOUBLE,
    LATITUDE DOUBLE,
    LONGITUDE DOUBLE,
    HIGHWAY_DISTRICT INT,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO BRIDGE_LOCATION
(SELECT BRIDGE_ID, STATE_CODE_001, OTHER_STATE_CODE_098A, OTHER_STATE_PCNT_098B, OTHR_STATE_STRUC_NO_099, 
		LOCATION_009, COUNTY_CODE_003, PLACE_CODE_004, LAT_016, LONG_017, HIGHWAY_DISTRICT_002  FROM usbridges_new);

SELECT * FROM BRIDGE_LOCATION;

# Create INVENTORY_ROUTE table
CREATE TABLE INVENTORY_ROUTE (
	BRIDGE_ID INT NOT NULL,
    RECORD_TYPE INT,
    ROUTE_PREFIX DOUBLE,
    ROUTE_NUMBER VARCHAR(255),
    SUBROUTE_NO VARCHAR(255),
    LRS_INV_ROUTE VARCHAR(255),
    TRAFFIC_LANES_ON DOUBLE,
    TRAFFIC_LANES_UND DOUBLE,
    TRAFFIC_DIRECTION DOUBLE,
    DIRECTION DOUBLE,
    BASE_HWY_NETWORK DOUBLE,
    SERVICE_LEVEL DOUBLE,
    FUNCTIONAL_CLASS DOUBLE,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO INVENTORY_ROUTE
(SELECT BRIDGE_ID, RECORD_TYPE_005A, ROUTE_PREFIX_005B, ROUTE_NUMBER_005D, SUBROUTE_NO_013B, LRS_INV_ROUTE_013A,
        TRAFFIC_LANES_ON_028A, TRAFFIC_LANES_UND_028B, TRAFFIC_DIRECTION_102, DIRECTION_005E, BASE_HWY_NETWORK_012,
        SERVICE_LEVEL_005C, FUNCTIONAL_CLASS_026 FROM usbridges_new);

SELECT * FROM INVENTORY_ROUTE;

# Create BRIDGE_TRAFFIC table
CREATE TABLE BRIDGE_TRAFFIC (
	BRIDGE_ID INT NOT NULL,
    ADT DOUBLE,
    YEAR_ADT DOUBLE,
    FUTURE_ADT DOUBLE,
    YEAR_OF_FUTURE_ADT DOUBLE,
    PERCENT_ADT_TRUCK DOUBLE,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO BRIDGE_TRAFFIC
(SELECT BRIDGE_ID, ADT_029, YEAR_ADT_030, FUTURE_ADT_114, YEAR_OF_FUTURE_ADT_115, PERCENT_ADT_TRUCK_109 FROM usbridges_new);

SELECT * FROM BRIDGE_TRAFFIC;

# Create BRIDGE_MATERIAL table
CREATE TABLE BRIDGE_MATERIAL (
	BRIDGE_ID INT NOT NULL,
	STRUCTURE_TYPE DOUBLE,
    STRUCTURE_KIND DOUBLE,
    APPR_KIND DOUBLE,
    APPR_TYPE DOUBLE,
    DECK_STRUCTURE VARCHAR(255),
    SURFACE_TYPE VARCHAR(255),
    MEMBRANE_TYPE VARCHAR(255),
    DECK_PROTECTION VARCHAR(255),
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO BRIDGE_MATERIAL
(SELECT BRIDGE_ID, STRUCTURE_TYPE_043B, STRUCTURE_KIND_043A, APPR_KIND_044A, APPR_TYPE_044B, 
		DECK_STRUCTURE_TYPE_107, SURFACE_TYPE_108A, MEMBRANE_TYPE_108B, DECK_PROTECTION_108C FROM usbridges_new);
        
SELECT * FROM BRIDGE_MATERIAL;

# Create BRIDGE_IMPROVEMENT table
CREATE TABLE BRIDGE_IMPROVEMENT (
	BRIDGE_ID INT NOT NULL,
	IMP_LEN_MT INT NOT NULL,
    BRIDGE_IMP_COST INT NOT NULL,
    ROADWAY_IMP_COST INT NOT NULL,
	TOTAL_IMP_COST INT NOT NULL,
    YEAR_OF_IMP INT NOT NULL,
    DECK_AREA DOUBLE,
    WORK_PROPOSED VARCHAR(255),
    WORK_DONE_BY VARCHAR(255),
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO BRIDGE_IMPROVEMENT
(SELECT BRIDGE_ID, IMP_LEN_MT_076, BRIDGE_IMP_COST_094, ROADWAY_IMP_COST_095, TOTAL_IMP_COST_096, 
		YEAR_OF_IMP_097, DECK_AREA, WORK_PROPOSED_075A, WORK_DONE_BY_075B FROM usbridges_new);
        
SELECT * FROM BRIDGE_IMPROVEMENT;

# Create BRIDGE_CONDITION table
CREATE TABLE BRIDGE_CONDITION (
	BRIDGE_ID INT NOT NULL,
	MAINTENENCE_RESPONSIBILITY DOUBLE,
    BRIDGE_CONDITION VARCHAR(255),
    DECK_CONDITION VARCHAR(255),
	SUPERSTRUCTURE_CONDITION VARCHAR(255),
    SUBSTRUCTURE_CONDITION VARCHAR(255), 
    CHANNEL_CONDITION VARCHAR(255),
    CULVERT_CONDITION VARCHAR(255),
    PIER_PROTECTION VARCHAR(255), 
    SCOUR_CRITICAL DOUBLE,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO BRIDGE_CONDITION
(SELECT BRIDGE_ID, MAINTENANCE_021, BRIDGE_CONDITION, DECK_COND_058, SUPERSTRUCTURE_COND_059, 
		SUBSTRUCTURE_COND_060, CHANNEL_COND_061, CULVERT_COND_062, PIER_PROTECTION_111, SCOUR_CRITICAL_113
        FROM usbridges_new);
        
SELECT * FROM BRIDGE_CONDITION;

# Create BRIDGE_EVALUATION table
CREATE TABLE BRIDGE_EVALUATION (
	BRIDGE_ID INT NOT NULL,
	STRUCTURAL_EVAL DOUBLE,
    UNDCLRENCE_EVAL VARCHAR(255),
    APPR_ROAD_EVAL DOUBLE, 
	POSTING_EVAL DOUBLE,
    DECK_GEOMETRY_EVAL VARCHAR(255),
    WATERWAY_EVAL VARCHAR(255),
    OPERATING_RATING_METHOD DOUBLE,
    OPERATING_RATING DOUBLE,
    INVENTORY_RATING_METHOD DOUBLE,
    INVENTORY_RATING DOUBLE,
    LOWEST_RATING DOUBLE,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO BRIDGE_EVALUATION
(SELECT BRIDGE_ID, STRUCTURAL_EVAL_067, UNDCLRENCE_EVAL_069, APPR_ROAD_EVAL_072, POSTING_EVAL_070, 
		DECK_GEOMETRY_EVAL_068, WATERWAY_EVAL_071, OPR_RATING_METH_063, OPERATING_RATING_064, 
        INV_RATING_METH_065, INVENTORY_RATING_066, LOWEST_RATING FROM usbridges_new);
        
SELECT * FROM BRIDGE_EVALUATION;

# Create BRIDGE_INSPECTION table
CREATE TABLE BRIDGE_INSPECTION (
	BRIDGE_ID INT NOT NULL,
    DATE_OF_INSPECT INT NOT NULL,
    INSPECT_FREQ_MONTHS INT NOT NULL,
    FRACTURE VARCHAR(255),
    FRACTURE_LAST_DATE INT NOT NULL,
    UNDWATER_LOOK_SEE VARCHAR(255),
    SPEC_INSPECT CHAR(3),
    FEATURES_DESC VARCHAR(255),
    UNDWATER_LAST_DATE VARCHAR(255),
    SPEC_LAST_DATE VARCHAR(255),
    PRIMARY KEY (BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);

INSERT INTO BRIDGE_INSPECTION
(SELECT BRIDGE_ID, DATE_OF_INSPECT_090, INSPECT_FREQ_MONTHS_091, FRACTURE_092A, FRACTURE_LAST_DATE_093A, 
 UNDWATER_LOOK_SEE_092B, SPEC_INSPECT_092C, FEATURES_DESC_006A, UNDWATER_LAST_DATE_093B, 
 SPEC_LAST_DATE_093C FROM usbridges_new);
 
 SELECT * FROM BRIDGE_INSPECTION;
 
 # Create SAFETY table
CREATE TABLE SAFETY (
	BRIDGE_ID INT NOT NULL,
	RAILINGS INT NOT NULL,
    TRANSITIONS INT NOT NULL,
    APPR_RAIL INT NOT NULL,
    APPR_RAIL_END INT NOT NULL,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES erg3010.BRIDGE(BRIDGE_ID)
);

INSERT INTO SAFETY
(SELECT BRIDGE_ID, RAILINGS_036A, TRANSITIONS_036B, APPR_RAIL_036C, APPR_RAIL_END_036D FROM usbridges_new);

SELECT * FROM SAFETY;

# Create the QUALITATIVE table
CREATE TABLE QUALITATIVE (
	BRIDGE_ID INT NOT NULL,
	CRITICAL_FACILITY VARCHAR(255) DEFAULT NULL,
    FACILITY_CARRIED VARCHAR(255) NOT NULL,
    BRIDGE_HISTORY INT NOT NULL,
    DESIGN_LOAD INT NOT NULL, 
    NAVIGATION CHAR(1) NOT NULL,
    OPEN_CLOSED_POSTED CHAR(1) NOT NULL,
    STRAHNET_HIGHWAY INT NOT NULL,
    PARALLEL_STRUCTURE CHAR(1) NOT NULL, 
    TEMP_STRUCTURE VARCHAR(255) DEFAULT NULL,
    HIGHWAY_SYSTEM INT NOT NULL,
    FEDERAL_LANDS INT NOT NULL,
    NATIONAL_NETWORK INT NOT NULL,
    BRIDGE_LEN_IND CHAR(1) NOT NULL,
    FED_AGENCY CHAR(1) NOT NULL,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)    
);
	
INSERT INTO QUALITATIVE 
(SELECT  BRIDGE_ID, CRITICAL_FACILITY_006B, FACILITY_CARRIED_007, HISTORY_037, DESIGN_LOAD_031, 
NAVIGATION_038, OPEN_CLOSED_POSTED_041, STRAHNET_HIGHWAY_100, PARALLEL_STRUCTURE_101, TEMP_STRUCTURE_103, 
HIGHWAY_SYSTEM_104, FEDERAL_LANDS_105, NATIONAL_NETWORK_110, BRIDGE_LEN_IND_112, FED_AGENCY	 
FROM usbridges_new
); 

SELECT * FROM QUALITATIVE;

# Create the QUANTITATIVE table
CREATE TABLE QUANTITATIVE (
	BRIDGE_ID INT NOT NULL, 
	MIN_VERT_CLR DECIMAL NOT NULL, 
	APPR_WIDTH_MT DECIMAL NOT NULL,
	MEDIAN_CODE INT NOT NULL, 
	DEGREES_SKEW INT NOT NULL, 
	STRUCTURE_FLARED INT NOT NULL, 
	KILOPOINT DECIMAL NOT NULL, 
	DETOUR_KILOS INT NOT NULL, 
	TOLL INT NOT NULL, 
	MAIN_UNIT_SPANS INT NOT NULL, 
	APPR_SPANS_046 INT NOT NULL, 
	HORR_CLR_MT DECIMAL NOT NULL, 
	MAX_SPAN_LEN_MT DECIMAL NOT NULL, 
	IMP_LEN_MT DECIMAL NOT NULL, 
	LEFT_CURB_MT DECIMAL NOT NULL, 
	RIGHT_CURB_MT DECIMAL NOT NULL, 
	ROADWAY_WIDTH_MT DECIMAL NOT NULL, 
	DECK_WIDTH_MT DECIMAL NOT NULL, 
	VERT_CLR_OVER_MT DECIMAL NOT NULL, 
	VERT_CLR_UND_REF CHAR(1) NOT NULL, 
	VERT_CLR_UNDINT INT NOT NULL, 
	LAT_UND_REF CHAR(1) NOT NULL, 
	LAT_UND_MT INT NOT NULL, 
	LEFT_LAT_UND_MT INT NOT NULL, 
	NAV_VERT_CLR_MT INT NOT NULL, 
	NAV_HORR_CLR_MT INT NOT NULL, 
	MIN_NAV_CLR_MT VARCHAR(255) DEFAULT NULL,
    PRIMARY KEY(BRIDGE_ID),
    FOREIGN KEY(BRIDGE_ID) REFERENCES BRIDGE(BRIDGE_ID)
);  

INSERT INTO QUANTITATIVE
(SELECT BRIDGE_ID, MIN_VERT_CLR_010, APPR_WIDTH_MT_032, MEDIAN_CODE_033	, DEGREES_SKEW_034, 
STRUCTURE_FLARED_035, KILOPOINT_011, DETOUR_KILOS_019, TOLL_020, MAIN_UNIT_SPANS_045, APPR_SPANS_046, 
HORR_CLR_MT_047	, MAX_SPAN_LEN_MT_048, IMP_LEN_MT_049, LEFT_CURB_MT_050A, RIGHT_CURB_MT_050B, 
ROADWAY_WIDTH_MT_051, DECK_WIDTH_MT_052, VERT_CLR_OVER_MT_053, VERT_CLR_UND_REF_054A, VERT_CLR_UND_054B, 
LAT_UND_REF_055A, LAT_UND_MT_055B, LEFT_LAT_UND_MT_056, NAV_VERT_CLR_MT_039, NAV_HORR_CLR_MT_040, 
MIN_NAV_CLR_MT_116 FROM usbridges_new);

SELECT * FROM QUANTITATIVE;

-- BASIC QUESTIONS
# According to the current raw data, what is the unique number of each bridge?
SELECT DISTINCT COUNT(BRIDGE_ID) AS UNIQUE_NUM_BRIDGE FROM BRIDGE
GROUP BY STRUCTURE_NUMBER;

# How many bridges have been built in U.S. by the time of the raw data provision?
SELECT DISTINCT COUNT(BRIDGE_ID) AS NUM_BRIDGE_US FROM BRIDGE;

# In which year did U.S. build the largest number of bridges?
SELECT YEAR_BUILT, COUNT(BRIDGE_ID) as NUM_BRIDGE
FROM bridge
GROUP BY YEAR_BUILT
ORDER BY COUNT(BRIDGE_ID) DESC
LIMIT 1;

# Which state in U.S. has built the largest number of bridges?
SELECT STATE_CODE, COUNT(BRIDGE_ID) as NUM_BRIDGE
FROM bridge_location
GROUP BY STATE_CODE
ORDER BY COUNT(BRIDGE_ID) DESC
LIMIT 1;

# Which two states in the United States have the most interstate bridges?
SELECT bridge_location.STATE_CODE, count(*) as NUM_INTERSTATE_BRIDGE
FROM bridge_location
INNER JOIN inventory_route ON bridge_location.BRIDGE_ID=inventory_route.BRIDGE_ID
GROUP BY STATE_CODE, ROUTE_PREFIX
HAVING ROUTE_PREFIX = 1
ORDER BY count(*) DESC
LIMIT 2;
-- After Optimization
SELECT STATE_CODE, COUNT(BRIDGE_ID) AS NUM_INTERSTATE_BRIDGE FROM BRIDGE_LOCATION
WHERE BRIDGE_ID IN (SELECT BRIDGE_ID FROM INVENTORY_ROUTE WHERE ROUTE_PREFIX = 1)
GROUP BY STATE_CODE
ORDER BY NUM_INTERSTATE_BRIDGE DESC
LIMIT 2;

# In terms of traffic, which bridge is the busiest in America?
SELECT BRIDGE_ID, ADT
FROM bridge_traffic
ORDER BY ADT DESC
LIMIT 1;

# In terms of length, which bridge is the longest in America?
SELECT BRIDGE_ID, STRUCTURE_LEN_MT
FROM quantitative
ORDER BY STRUCTURE_LEN_MT DESC
LIMIT 1;

-- QUESTIONS ABOUT BRIDGE MAINTENANCE COST
# What is the overall health of bridges in U.S.?
SELECT BRIDGE_CONDITION, COUNT(BRIDGE_ID) AS NUM_BRIDGE FROM BRIDGE_CONDITION
WHERE BRIDGE_CONDITION != ''
GROUP BY BRIDGE_CONDITION
ORDER BY NUM_BRIDGE DESC
LIMIT 1;

# Is every bridge regularly checked for health? How often does the government or the owner of the bridge inspect all bridges on average?
SELECT AVG(INSPECT_FREQ_MONTHS) FROM BRIDGE_INSPECTION;

# What is the annual maintenance and improvement cost of each bridge? Sort the results in descending order.
SELECT BRIDGE_ID, TOTAL_IMP_COST FROM BRIDGE_IMPROVEMENT
GROUP BY BRIDGE_ID
ORDER BY TOTAL_IMP_COST DESC;

# What is the total cost of all investment in bridge maintenance and improvement in U.S.?
SELECT SUM(TOTAL_IMP_COST) FROM BRIDGE_IMPROVEMENT;

# What type of bridge costs the most to maintain and improve?
SELECT BRIDGE_MATERIAL.STRUCTURE_TYPE, SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) AS TOTAL_IMP_COST
FROM BRIDGE_MATERIAL
INNER JOIN BRIDGE_IMPROVEMENT
ON BRIDGE_MATERIAL.BRIDGE_ID = BRIDGE_IMPROVEMENT.BRIDGE_ID
GROUP BY BRIDGE_MATERIAL.STRUCTURE_TYPE
ORDER BY SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) DESC
LIMIT 1;
-- After optimization (filtering out records with zero TOTAL_IMP_COST values)
SELECT BRIDGE_MATERIAL.STRUCTURE_TYPE, SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) AS TOTAL_IMP_COST
FROM BRIDGE_MATERIAL
INNER JOIN BRIDGE_IMPROVEMENT
ON BRIDGE_MATERIAL.BRIDGE_ID = BRIDGE_IMPROVEMENT.BRIDGE_ID
AND BRIDGE_IMPROVEMENT.TOTAL_IMP_COST != 0
GROUP BY BRIDGE_MATERIAL.STRUCTURE_TYPE
ORDER BY SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) DESC
LIMIT 1;

# What factors are related to the maintenance and improvement cost of bridges?
# Possible Factors:
-- 1. STRUCTURE_KIND
SELECT BRIDGE_MATERIAL.STRUCTURE_KIND, AVG(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) AS TOTAL_IMP_COST
FROM BRIDGE_MATERIAL
INNER JOIN BRIDGE_IMPROVEMENT
ON BRIDGE_MATERIAL.BRIDGE_ID = BRIDGE_IMPROVEMENT.BRIDGE_ID
AND BRIDGE_IMPROVEMENT.TOTAL_IMP_COST != 0
GROUP BY BRIDGE_MATERIAL.STRUCTURE_KIND
ORDER BY STRUCTURE_KIND ASC;

-- 2. DECK_AREA
SELECT AREA_RANGE, AVG(TOTAL_IMP_COST) AS AVG_COST
FROM (
		SELECT CASE WHEN DECK_AREA <= 25000.0 then '0-25000'
					WHEN DECK_AREA <= 50000.0 and DECK_AREA > 25000.0 then '25000-50000'
					WHEN DECK_AREA <= 75000.0 and DECK_AREA > 50000.0 then '50000-75000'
					WHEN DECK_AREA <= 100000.0 and DECK_AREA > 75000.0 then '75000-100000'
					WHEN DECK_AREA <= 125000.0 and DECK_AREA > 100000.0 then '10000-125000'
					WHEN DECK_AREA <= 150000.0 and DECK_AREA > 125000.0 then '125000-150000'
			   ELSE '150000'
			   END AS AREA_RANGE, 
               TOTAL_IMP_COST
		FROM BRIDGE_IMPROVEMENT
) AS DT
GROUP BY AREA_RANGE
ORDER BY AVG_COST DESC;

-- 3. IMP_LEN_MT 
SELECT LEN_RANGE, AVG(TOTAL_IMP_COST) AS AVG_COST
FROM (
		SELECT CASE WHEN IMP_LEN_MT <= 1000.0 then '0-1000'
					WHEN IMP_LEN_MT <= 2000.0 and IMP_LEN_MT > 1000.0 then '1000-2000'
					WHEN IMP_LEN_MT <= 2000.0 and IMP_LEN_MT > 1000.0 then '1000-2000'
					WHEN IMP_LEN_MT <= 3000.0 and IMP_LEN_MT > 2000.0 then '2000-3000'
					WHEN IMP_LEN_MT <= 4000.0 and IMP_LEN_MT > 3000.0 then '3000-4000'
					WHEN IMP_LEN_MT <= 5000.0 and IMP_LEN_MT > 4000.0 then '4000-5000'
					WHEN IMP_LEN_MT <= 6000.0 and IMP_LEN_MT > 5000.0 then '5000-6000'
					WHEN IMP_LEN_MT <= 7000.0 and IMP_LEN_MT > 6000.0 then '6000-7000'
					WHEN IMP_LEN_MT <= 8000.0 and IMP_LEN_MT > 7000.0 then '7000-8000'
					WHEN IMP_LEN_MT <= 9000.0 and IMP_LEN_MT > 8000.0 then '8000-9000'
					WHEN IMP_LEN_MT <= 10000.0 and IMP_LEN_MT > 9000.0 then '9000-10000'
			   ELSE '>10000'
			   END AS LEN_RANGE, 
               TOTAL_IMP_COST
		FROM BRIDGE_IMPROVEMENT
) AS DT
GROUP BY LEN_RANGE
ORDER BY AVG_COST DESC;

-- 4. BRIDGE_COND 
SELECT BRIDGE_CONDITION, AVG(TOTAL_IMP_COST) AS AVERAGE_COST
FROM (BRIDGE_IMPROVEMENT AS TABLE1), (BRIDGE_CONDITION AS TABLE2)
WHERE TABLE1.BRIDGE_ID = TABLE2.BRIDGE_ID AND TOTAL_IMP_COST != 0
GROUP BY BRIDGE_CONDITION
ORDER BY AVG(TOTAL_IMP_COST) DESC;

-- 5. DECK_COND
SELECT DECK_CONDITION, AVG(TOTAL_IMP_COST) AS AVERAGE_COST
FROM (BRIDGE_IMPROVEMENT AS TABLE1), (BRIDGE_CONDITION AS TABLE2)
WHERE TABLE1.BRIDGE_ID = TABLE2.BRIDGE_ID AND TOTAL_IMP_COST != 0
GROUP BY DECK_CONDITION
ORDER BY AVG(TOTAL_IMP_COST) DESC;

-- 6. SUPERSTRUCTURE_COND 
SELECT SUPERSTRUCTURE_CONDITION, AVG(TOTAL_IMP_COST) AS AVERAGE_COST 
FROM (BRIDGE_IMPROVEMENT AS TABLE1),(BRIDGE_CONDITION AS TABLE2)
WHERE TABLE1.BRIDGE_ID = TABLE2.BRIDGE_ID AND TOTAL_IMP_COST != 0
GROUP BY SUPERSTRUCTURE_CONDITION
ORDER BY AVG(TOTAL_IMP_COST) DESC;

-- 7. SERVICE_ON
SELECT SERVICE_ON, AVG(TOTAL_IMP_COST) AS AVERAGE_COST
FROM (BRIDGE AS TABLE1), (BRIDGE_IMPROVEMENT AS TABLE2)
WHERE TABLE1.BRIDGE_ID = TABLE2.BRIDGE_ID AND TOTAL_IMP_COST != 0
GROUP BY SERVICE_ON
ORDER BY AVG(TOTAL_IMP_COST) DESC;

-- 8. SERVICE_UND
SELECT SERVICE_UND, AVG(TOTAL_IMP_COST) AS AVERAGE_COST
FROM (BRIDGE AS TABLE1), (BRIDGE_IMPROVEMENT AS TABLE2)
WHERE TABLE1.BRIDGE_ID = TABLE2.BRIDGE_ID AND TOTAL_IMP_COST != 0
GROUP BY SERVICE_UND
ORDER BY AVG(TOTAL_IMP_COST) DESC;

# Which state invests the most in the maintenance and improvement of bridges?
SELECT BRIDGE_LOCATION.STATE_CODE, SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) AS TOTAL_INVEST
FROM BRIDGE_LOCATION
INNER JOIN BRIDGE_IMPROVEMENT
ON BRIDGE_LOCATION.BRIDGE_ID = BRIDGE_IMPROVEMENT.BRIDGE_ID
GROUP BY BRIDGE_LOCATION.STATE_CODE
ORDER BY SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) DESC
LIMIT 1;
-- After optimization (filtering out records with zero TOTAL_IMP_COST values)
SELECT BRIDGE_LOCATION.STATE_CODE, SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) AS TOTAL_INVEST
FROM BRIDGE_LOCATION
INNER JOIN BRIDGE_IMPROVEMENT
ON BRIDGE_LOCATION.BRIDGE_ID = BRIDGE_IMPROVEMENT.BRIDGE_ID
AND BRIDGE_IMPROVEMENT.TOTAL_IMP_COST != 0
GROUP BY BRIDGE_LOCATION.STATE_CODE
ORDER BY SUM(BRIDGE_IMPROVEMENT.TOTAL_IMP_COST) DESC
LIMIT 1;

# What kind of materials are most used in bridge maintenance and improvement?
SELECT STRUCTURE_KIND, COUNT(BRIDGE_ID) AS NUM_BRIDGE FROM BRIDGE_MATERIAL
WHERE BRIDGE_ID IN (SELECT BRIDGE_ID FROM BRIDGE_IMPROVEMENT WHERE TOTAL_IMP_COST != 0)
GROUP BY STRUCTURE_KIND
ORDER BY NUM_BRIDGE DESC
LIMIT 1;

# Extra Questions:
# What factors are related to the health of the bridges?
-- 1. ADT 
SELECT BRIDGE_CONDITION, AVG(ADT) AS AVERAGE_ADT
FROM (BRIDGE_CONDITION AS t1), (BRIDGE_TRAFFIC AS t2)
WHERE t1.BRIDGE_ID = t2.BRIDGE_ID AND BRIDGE_CONDITION != ''
GROUP BY BRIDGE_CONDITION;

-- 2. STRUCTURE_KIND
SELECT STRUCTURE_KIND, BRIDGE_CONDITION 
FROM (BRIDGE_MATERIAL AS t1), (BRIDGE_CONDITION AS t2)
WHERE t1.BRIDGE_ID = t2.BRIDGE_ID 
AND t2.BRIDGE_CONDITION != ''
GROUP BY STRUCTURE_KIND
ORDER BY STRUCTURE_KIND;

-- 3. AGE (2021 - YEAR_BUILT)
SELECT BRIDGE_CONDITION, YEAR_BUILT, (2021-YEAR_BUILT) AS AGE_SINCE_BUILT
FROM (BRIDGE AS TABLE1), (BRIDGE_CONDITION AS TABLE2) 
WHERE TABLE1.BRIDGE_ID = TABLE2.BRIDGE_ID AND BRIDGE_CONDITION != "" AND YEAR_BUILT != 0
ORDER BY AGE_SINCE_BUILT;

-- 4. MAINTENANCE_RESPONSIBILITY 
SELECT MAINTENENCE_RESPONSIBILITY, BRIDGE_CONDITION
FROM bridge_condition
WHERE BRIDGE_CONDITION != ''
GROUP BY MAINTENENCE_RESPONSIBILITY
ORDER BY MAINTENENCE_RESPONSIBILITY;

-- 5. FRACTURE
SELECT FRACTURE, BRIDGE_CONDITION
FROM (bridge_condition AS TABLE1), (bridge_inspection AS TABLE2)
WHERE TABLE1.BRIDGE_ID = TABLE2.BRIDGE_ID AND BRIDGE_CONDITION != '' AND FRACTURE != ''
GROUP BY FRACTURE
ORDER BY FRACTURE;